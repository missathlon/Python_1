01-02-2023 15:16:07 - main - INFO - <module> - Start program
01-02-2023 15:16:07 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 15:16:10 - user_interface - INFO - menu_add - Start add menu
01-02-2023 15:16:21 - user_interface - INFO - menu_add - Stop edd menu
01-02-2023 15:16:21 - controller - INFO - add_info - Adding a new entry: {'id': '1', 'name': 'bf', 'surname': 'fg', 'faculty': 'df', 'form of education': 'df', 'course': '3'}
01-02-2023 15:26:25 - main - INFO - <module> - Start program
01-02-2023 15:26:25 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 15:26:27 - user_interface - INFO - menu_add - Start add menu
01-02-2023 15:26:34 - user_interface - INFO - menu_add - Stop edd menu
01-02-2023 15:26:34 - controller - INFO - add_info - Adding a new entry: {'id': '1', 'name': 'df', 'surname': 'sd', 'faculty': 'gd', 'form of education': 'fd', 'course': '4'}
01-02-2023 15:27:20 - main - INFO - <module> - Start program
01-02-2023 15:27:20 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 15:27:22 - user_interface - INFO - menu_add - Start add menu
01-02-2023 15:27:28 - user_interface - INFO - menu_add - Stop edd menu
01-02-2023 15:27:28 - controller - INFO - add_info - Adding a new entry: {'id': '1', 'name': 'fg', 'surname': 'dd', 'faculty': 'dd', 'form of education': 'dd', 'course': '4'}
01-02-2023 15:27:28 - controller - WARNING - add_info - Data added to the student list: dict_values([11, 'fg', 'dd', 'dd', 'dd', '4'])
01-02-2023 15:27:28 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 15:50:07 - main - INFO - <module> - Start program
01-02-2023 15:50:07 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 15:59:02 - main - INFO - <module> - Start program
01-02-2023 15:59:02 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 16:24:01 - main - INFO - <module> - Start program
01-02-2023 16:24:01 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 16:24:05 - user_interface - INFO - menu_add - Start add menu
01-02-2023 16:24:11 - user_interface - INFO - menu_add - Stop edd menu
01-02-2023 16:24:11 - controller - INFO - add_info - Adding a new entry: {'id': '1', 'name': 'ff', 'surname': 'gg', 'faculty': 'hh', 'form of education': 'hh', 'course': '4'}
01-02-2023 16:27:18 - main - INFO - <module> - Start program
01-02-2023 16:27:18 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 16:27:20 - user_interface - INFO - menu_add - Start add menu
01-02-2023 16:27:26 - user_interface - INFO - menu_add - Stop edd menu
01-02-2023 16:27:26 - controller - INFO - add_info - Adding a new entry: {'id': '1', 'name': 'ff', 'surname': 'ff', 'faculty': 'ff', 'form of education': 'ff', 'course': '4'}
01-02-2023 16:27:26 - controller - WARNING - add_info - Data added to the student list: dict_values([12, 'ff', 'ff', 'ff', 'ff', '4'])
01-02-2023 16:27:26 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 16:45:13 - main - INFO - <module> - Start program
01-02-2023 16:45:13 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 16:45:15 - user_interface - INFO - menu_add - Start add menu
01-02-2023 16:45:20 - user_interface - INFO - menu_add - Stop edd menu
01-02-2023 16:45:20 - controller - INFO - add_info - Adding a new entry: {'id': '1', 'name': 'dd', 'surname': 'dd', 'faculty': 'dd', 'form of education': 'dd', 'course': '3'}
01-02-2023 16:56:05 - main - INFO - <module> - Start program
01-02-2023 16:56:05 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 16:56:07 - user_interface - INFO - menu_add - Start add menu
01-02-2023 16:56:13 - user_interface - INFO - menu_add - Stop edd menu
01-02-2023 16:56:13 - controller - INFO - add_info - Adding a new entry: {'id': '1', 'name': 'ss', 'surname': 'ss', 'faculty': 'ss', 'form of education': 'ss', 'course': '2'}
01-02-2023 16:56:13 - controller - WARNING - add_info - Data added to the student list: dict_values([13, 'ss', 'ss', 'ss', 'ss', '2'])
01-02-2023 16:56:13 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 16:57:08 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 16:57:12 - user_interface - INFO - menu_add - Start add menu
01-02-2023 16:58:13 - user_interface - INFO - menu_add - Stop edd menu
01-02-2023 16:58:13 - controller - INFO - add_info - Adding a new entry: {'id': '1', 'name': 'ff', 'surname': 'dd', 'faculty': 'ss', 'form of education': 'ss', 'course': '2'}
01-02-2023 16:58:13 - controller - WARNING - add_info - Data added to the student list: dict_values([11, 'ff', 'dd', 'ss', 'ss', '2'])
01-02-2023 16:58:13 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 16:58:35 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 16:58:39 - user_interface - INFO - menu_add - Start add menu
01-02-2023 16:58:45 - user_interface - INFO - menu_add - Stop edd menu
01-02-2023 16:58:45 - controller - INFO - add_info - Adding a new entry: {'id': '1', 'name': 'dd', 'surname': 'dd', 'faculty': 'dd', 'form of education': 'dd', 'course': '2'}
01-02-2023 16:58:45 - controller - WARNING - add_info - Data added to the student list: dict_values([11, 'dd', 'dd', 'dd', 'dd', '2'])
01-02-2023 16:58:45 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 17:03:33 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 17:03:36 - user_interface - INFO - menu_add - Start add menu
01-02-2023 17:03:42 - user_interface - INFO - menu_add - Stop edd menu
01-02-2023 17:03:42 - controller - INFO - add_info - Adding a new entry: {'id': '1', 'name': 'gg', 'surname': 'gg', 'faculty': 'gg', 'form of education': 'g', 'course': '1'}
01-02-2023 17:03:42 - controller - WARNING - add_info - Data added to the student list: dict_values([12, 'gg', 'gg', 'gg', 'g', '1'])
01-02-2023 17:03:42 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 19:23:05 - main - INFO - <module> - Start program
01-02-2023 19:23:05 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 19:23:14 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 19:23:14 - controller - INFO - find_entry - Search: 11
01-02-2023 19:23:14 - controller - INFO - find_entry - Search result: ['11 dd dd dd dd 2']
01-02-2023 19:23:14 - user_interface - INFO - edit_menu - Start edit menu
01-02-2023 19:23:26 - controller - INFO - edit_entry - Data changes: ('name', '\u0418\u043c\u044f')
01-02-2023 19:23:26 - controller - INFO - find_entry - Search: 11
01-02-2023 19:23:26 - controller - INFO - find_entry - Search result: ['11 dd dd dd dd 2']
01-02-2023 19:23:26 - controller - INFO - edit_entry - Current value: dd
01-02-2023 19:23:26 - controller - INFO - edit_entry - New value: \u0418\u043c\u044f
01-02-2023 19:25:20 - main - INFO - <module> - Start program
01-02-2023 19:25:20 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 19:27:44 - main - INFO - <module> - Start program
01-02-2023 19:27:44 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 19:27:52 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 19:27:52 - controller - INFO - find_entry - Search: 11
01-02-2023 19:27:52 - controller - INFO - find_entry - Search result: ['11  dd  dd  dd  dd  2']
01-02-2023 19:27:52 - user_interface - INFO - edit_menu - Start edit menu
01-02-2023 19:28:01 - controller - INFO - edit_entry - Data changes: ('name', 'Name')
01-02-2023 19:28:01 - controller - INFO - find_entry - Search: 11
01-02-2023 19:28:01 - controller - INFO - find_entry - Search result: ['11  dd  dd  dd  dd  2']
01-02-2023 19:28:52 - main - INFO - <module> - Start program
01-02-2023 19:28:52 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 19:28:58 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 19:28:58 - controller - INFO - find_entry - Search: 11
01-02-2023 19:28:58 - controller - INFO - find_entry - Search result: ['11  dd  dd  dd  dd  2']
01-02-2023 19:28:58 - user_interface - INFO - edit_menu - Start edit menu
01-02-2023 19:29:27 - controller - INFO - edit_entry - Data changes: ('name', 'Petya')
01-02-2023 19:29:27 - controller - INFO - find_entry - Search: 11
01-02-2023 19:29:27 - controller - INFO - find_entry - Search result: ['11  dd  dd  dd  dd  2']
01-02-2023 19:30:22 - main - INFO - <module> - Start program
01-02-2023 19:30:22 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 19:30:34 - user_interface - INFO - menu_add - Start add menu
01-02-2023 19:30:54 - user_interface - INFO - menu_add - Stop edd menu
01-02-2023 19:30:54 - controller - INFO - add_info - Adding a new entry: {'id': '1', 'name': 'dd', 'surname': 'dd', 'faculty': 'dd', 'form of education': 'dd', 'course': '3'}
01-02-2023 19:30:54 - controller - WARNING - add_info - Data added to the student list: dict_values([13, 'dd', 'dd', 'dd', 'dd', '3'])
01-02-2023 19:30:54 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 19:31:11 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 19:31:11 - controller - INFO - find_entry - Search: 12
01-02-2023 19:31:11 - controller - INFO - find_entry - Search result: ['12  gg  gg  gg  g  1']
01-02-2023 19:31:11 - user_interface - INFO - edit_menu - Start edit menu
01-02-2023 19:31:19 - controller - INFO - edit_entry - Data changes: ('name', 'Mom')
01-02-2023 19:31:19 - controller - INFO - find_entry - Search: 12
01-02-2023 19:31:19 - controller - INFO - find_entry - Search result: ['12  gg  gg  gg  g  1']
01-02-2023 19:31:19 - controller - INFO - edit_entry - Current value:  gg
01-02-2023 19:31:19 - controller - INFO - edit_entry - New value: Mom
01-02-2023 19:32:39 - main - INFO - <module> - Start program
01-02-2023 19:32:39 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 19:33:40 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 19:33:40 - controller - INFO - find_entry - Search: 11
01-02-2023 19:33:40 - controller - INFO - find_entry - Search result: ['11   dd   dd   dd   dd   2']
01-02-2023 19:33:40 - user_interface - INFO - edit_menu - Start edit menu
01-02-2023 19:33:53 - controller - INFO - edit_entry - Data changes: ('name', 'Mom')
01-02-2023 19:33:53 - controller - INFO - find_entry - Search: 11
01-02-2023 19:33:53 - controller - INFO - find_entry - Search result: ['11   dd   dd   dd   dd   2']
01-02-2023 19:33:53 - controller - INFO - edit_entry - Current value:   dd
01-02-2023 19:33:53 - controller - INFO - edit_entry - New value: Mom
01-02-2023 19:37:58 - main - INFO - <module> - Start program
01-02-2023 19:37:58 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 19:38:10 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 19:38:10 - controller - INFO - find_entry - Search: 11
01-02-2023 19:38:10 - controller - INFO - find_entry - Search result: ['11   dd   dd   dd   dd   2']
01-02-2023 19:38:10 - user_interface - INFO - edit_menu - Start edit menu
01-02-2023 19:38:19 - controller - INFO - edit_entry - Data changes: ('name', 'Nname')
01-02-2023 19:38:19 - controller - INFO - find_entry - Search: 11
01-02-2023 19:38:19 - controller - INFO - find_entry - Search result: ['11   dd   dd   dd   dd   2']
01-02-2023 19:38:19 - controller - INFO - edit_entry - Current value:   dd
01-02-2023 19:38:19 - controller - INFO - edit_entry - New value: Nname
01-02-2023 19:38:19 - controller - INFO - edit_entry - Data changed
01-02-2023 19:38:19 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 19:41:55 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 19:41:55 - controller - INFO - find_entry - Search: 11
01-02-2023 19:41:55 - controller - INFO - find_entry - Search result: ['11 Nname   dd   dd   dd   2']
01-02-2023 19:41:55 - user_interface - INFO - edit_menu - Start edit menu
01-02-2023 19:41:58 - user_interface - WARNING - edit_menu - Edit menu, wrong item selected.
01-02-2023 19:42:31 - controller - INFO - edit_entry - Data changes: ('form of education', 'den')
01-02-2023 19:42:31 - controller - INFO - find_entry - Search: 11
01-02-2023 19:42:31 - controller - INFO - find_entry - Search result: ['11 Nname   dd   dd   dd   2']
01-02-2023 19:42:31 - controller - INFO - edit_entry - Current value:   dd
01-02-2023 19:42:31 - controller - INFO - edit_entry - New value: den
01-02-2023 19:42:31 - controller - INFO - edit_entry - Data changed
01-02-2023 19:42:31 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 22:29:21 - main - INFO - <module> - Start program
01-02-2023 22:29:21 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 22:29:34 - controller - INFO - del_info - Deleting an entry: \u0411\u0430\u0448\u043b\u0430\u043a\u043e\u0432\u0430
01-02-2023 22:29:34 - controller - INFO - find_entry - Search: \u0411\u0430\u0448\u043b\u0430\u043a\u043e\u0432\u0430
01-02-2023 22:29:34 - controller - WARNING - find_entry - No data found: \u0411\u0430\u0448\u043b\u0430\u043a\u043e\u0432\u0430
01-02-2023 22:29:34 - controller - WARNING - del_info - No data found: \u0411\u0430\u0448\u043b\u0430\u043a\u043e\u0432\u0430
01-02-2023 22:29:34 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 22:30:42 - user_interface - WARNING - menu - Main menu, wrong item selected.
01-02-2023 22:30:42 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 22:30:52 - controller - INFO - del_info - Deleting an entry: \u0411\u0430\u0448\u043b\u0430\u043a\u043e\u0432\u0430
01-02-2023 22:30:52 - controller - INFO - find_entry - Search: \u0411\u0430\u0448\u043b\u0430\u043a\u043e\u0432\u0430
01-02-2023 22:30:52 - controller - INFO - find_entry - Search result: ['7   \u041e\u043b\u044c\u0433\u0430 \u0411\u0430\u0448\u043b\u0430\u043a\u043e\u0432\u0430   \u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430   \u0437\u0430\u043e\u0447\u043d\u0430\u044f   3']
01-02-2023 22:30:57 - controller - INFO - del_info - Id selected: 7
01-02-2023 22:30:57 - controller - INFO - del_info - Data deleted
01-02-2023 22:30:57 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 23:13:07 - main - INFO - <module> - Start program
01-02-2023 23:13:07 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 23:13:20 - user_interface - WARNING - menu - Main menu, wrong item selected.
01-02-2023 23:13:20 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 23:13:40 - user_interface - WARNING - menu - Main menu, wrong item selected.
01-02-2023 23:13:40 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 23:13:44 - user_interface - WARNING - menu - Main menu, wrong item selected.
01-02-2023 23:13:44 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 23:13:55 - user_interface - WARNING - menu - Main menu, wrong item selected.
01-02-2023 23:13:55 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 23:13:58 - user_interface - WARNING - menu - Main menu, wrong item selected.
01-02-2023 23:13:58 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 23:14:18 - user_interface - WARNING - menu - Main menu, wrong item selected.
01-02-2023 23:14:18 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 23:14:47 - main - INFO - <module> - Start program
01-02-2023 23:14:47 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 23:14:50 - user_interface - INFO - import_export_menu - Start import/export menu
01-02-2023 23:14:54 - user_interface - INFO - export_format_menu - Start export menu
01-02-2023 23:14:54 - user_interface - INFO - export_format_menu - Start choose a format menu
01-02-2023 23:38:34 - export - INFO - save_xml - Export in xml format: students.csv.xml
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'1': {'id': '1', 'name': '  \u041c\u0430\u0440\u0438\u044f', 'surname': '  \u0418\u0432\u0430\u043d\u043e\u0432\u0430', 'faculty': '  \u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  1'}, '2': {'id': '2', 'name': '  \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440', 'surname': '  \u0421\u0438\u0434\u043e\u0440\u043e\u0432', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  2'}, '3': {'id': '3', 'name': '  \u0418\u0440\u0438\u043d\u0430', 'surname': '  \u041a\u0440\u0430\u0441\u0430\u0432\u0446\u0435\u0432\u0430', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  3'}, '4': {'id': '4', 'name': '  \u0412\u0438\u043a\u0442\u043e\u0440', 'surname': '  \u041a\u0430\u0440\u043f\u043e\u0432', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  4'}, '5': {'id': '5', 'name': '  \u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0430', 'surname': '\u041c\u0430\u043b\u0430\u0448\u0435\u0432\u0438\u0447', 'faculty': '\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430', 'form of education': '\u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '1'}, '6': {'id': '6', 'name': '  \u0418\u0432\u0430\u043d', 'surname': '  \u0421\u0442\u0430\u043d\u043a\u0435\u0432\u0438\u0447', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  2'}, '8': {'id': '8', 'name': '  \u0421\u0432\u0435\u0442\u043b\u0430\u043d\u0430', 'surname': '  \u041f\u0435\u0442\u0440\u043e\u0432\u0430', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  4'}, '9': {'id': '9', 'name': '  \u0410\u043b\u0435\u043a\u0441\u0435\u0439', 'surname': '  \u0425\u043e\u0434\u0430\u0441\u0435\u0432\u0438\u0447', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  1'}, '10': {'id': '10', 'name': '  \u0410\u043d\u043d\u0430', 'surname': '  \u0410\u0437\u0430\u0440\u043a\u0435\u0432\u0438\u0447', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  2'}, '11': {'id': '11', 'name': 'Nname', 'surname': '  dd', 'faculty': '  dd', 'form of education': 'den', 'course': '  2'}, '12': {'id': '12', 'name': '  gg', 'surname': '  gg', 'faculty': '  gg', 'form of education': '  g', 'course': '  1'}, '13': {'id': '13', 'name': ' dd', 'surname': ' dd', 'faculty': ' dd', 'form of education': ' dd', 'course': ' 3'}}"
01-02-2023 23:38:34 - dicttoxml - INFO - dicttoxml - Inside dicttoxml(): type(obj) is: "dict", obj="{'1': {'id': '1', 'name': '  \u041c\u0430\u0440\u0438\u044f', 'surname': '  \u0418\u0432\u0430\u043d\u043e\u0432\u0430', 'faculty': '  \u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  1'}, '2': {'id': '2', 'name': '  \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440', 'surname': '  \u0421\u0438\u0434\u043e\u0440\u043e\u0432', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  2'}, '3': {'id': '3', 'name': '  \u0418\u0440\u0438\u043d\u0430', 'surname': '  \u041a\u0440\u0430\u0441\u0430\u0432\u0446\u0435\u0432\u0430', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  3'}, '4': {'id': '4', 'name': '  \u0412\u0438\u043a\u0442\u043e\u0440', 'surname': '  \u041a\u0430\u0440\u043f\u043e\u0432', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  4'}, '5': {'id': '5', 'name': '  \u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0430', 'surname': '\u041c\u0430\u043b\u0430\u0448\u0435\u0432\u0438\u0447', 'faculty': '\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430', 'form of education': '\u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '1'}, '6': {'id': '6', 'name': '  \u0418\u0432\u0430\u043d', 'surname': '  \u0421\u0442\u0430\u043d\u043a\u0435\u0432\u0438\u0447', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  2'}, '8': {'id': '8', 'name': '  \u0421\u0432\u0435\u0442\u043b\u0430\u043d\u0430', 'surname': '  \u041f\u0435\u0442\u0440\u043e\u0432\u0430', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  4'}, '9': {'id': '9', 'name': '  \u0410\u043b\u0435\u043a\u0441\u0435\u0439', 'surname': '  \u0425\u043e\u0434\u0430\u0441\u0435\u0432\u0438\u0447', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  1'}, '10': {'id': '10', 'name': '  \u0410\u043d\u043d\u0430', 'surname': '  \u0410\u0437\u0430\u0440\u043a\u0435\u0432\u0438\u0447', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  2'}, '11': {'id': '11', 'name': 'Nname', 'surname': '  dd', 'faculty': '  dd', 'form of education': 'den', 'course': '  2'}, '12': {'id': '12', 'name': '  gg', 'surname': '  gg', 'faculty': '  gg', 'form of education': '  g', 'course': '  1'}, '13': {'id': '13', 'name': ' dd', 'surname': ' dd', 'faculty': ' dd', 'form of education': ' dd', 'course': ' 3'}}"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'1': {'id': '1', 'name': '  \u041c\u0430\u0440\u0438\u044f', 'surname': '  \u0418\u0432\u0430\u043d\u043e\u0432\u0430', 'faculty': '  \u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  1'}, '2': {'id': '2', 'name': '  \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440', 'surname': '  \u0421\u0438\u0434\u043e\u0440\u043e\u0432', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  2'}, '3': {'id': '3', 'name': '  \u0418\u0440\u0438\u043d\u0430', 'surname': '  \u041a\u0440\u0430\u0441\u0430\u0432\u0446\u0435\u0432\u0430', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  3'}, '4': {'id': '4', 'name': '  \u0412\u0438\u043a\u0442\u043e\u0440', 'surname': '  \u041a\u0430\u0440\u043f\u043e\u0432', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  4'}, '5': {'id': '5', 'name': '  \u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0430', 'surname': '\u041c\u0430\u043b\u0430\u0448\u0435\u0432\u0438\u0447', 'faculty': '\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430', 'form of education': '\u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '1'}, '6': {'id': '6', 'name': '  \u0418\u0432\u0430\u043d', 'surname': '  \u0421\u0442\u0430\u043d\u043a\u0435\u0432\u0438\u0447', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  2'}, '8': {'id': '8', 'name': '  \u0421\u0432\u0435\u0442\u043b\u0430\u043d\u0430', 'surname': '  \u041f\u0435\u0442\u0440\u043e\u0432\u0430', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  4'}, '9': {'id': '9', 'name': '  \u0410\u043b\u0435\u043a\u0441\u0435\u0439', 'surname': '  \u0425\u043e\u0434\u0430\u0441\u0435\u0432\u0438\u0447', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  1'}, '10': {'id': '10', 'name': '  \u0410\u043d\u043d\u0430', 'surname': '  \u0410\u0437\u0430\u0440\u043a\u0435\u0432\u0438\u0447', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  2'}, '11': {'id': '11', 'name': 'Nname', 'surname': '  dd', 'faculty': '  dd', 'form of education': 'den', 'course': '  2'}, '12': {'id': '12', 'name': '  gg', 'surname': '  gg', 'faculty': '  gg', 'form of education': '  g', 'course': '  1'}, '13': {'id': '13', 'name': ' dd', 'surname': ' dd', 'faculty': ' dd', 'form of education': ' dd', 'course': ' 3'}}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert - Inside convert(). obj type is: "dict", obj="{'1': {'id': '1', 'name': '  \u041c\u0430\u0440\u0438\u044f', 'surname': '  \u0418\u0432\u0430\u043d\u043e\u0432\u0430', 'faculty': '  \u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  1'}, '2': {'id': '2', 'name': '  \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440', 'surname': '  \u0421\u0438\u0434\u043e\u0440\u043e\u0432', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  2'}, '3': {'id': '3', 'name': '  \u0418\u0440\u0438\u043d\u0430', 'surname': '  \u041a\u0440\u0430\u0441\u0430\u0432\u0446\u0435\u0432\u0430', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  3'}, '4': {'id': '4', 'name': '  \u0412\u0438\u043a\u0442\u043e\u0440', 'surname': '  \u041a\u0430\u0440\u043f\u043e\u0432', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  4'}, '5': {'id': '5', 'name': '  \u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0430', 'surname': '\u041c\u0430\u043b\u0430\u0448\u0435\u0432\u0438\u0447', 'faculty': '\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430', 'form of education': '\u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '1'}, '6': {'id': '6', 'name': '  \u0418\u0432\u0430\u043d', 'surname': '  \u0421\u0442\u0430\u043d\u043a\u0435\u0432\u0438\u0447', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  2'}, '8': {'id': '8', 'name': '  \u0421\u0432\u0435\u0442\u043b\u0430\u043d\u0430', 'surname': '  \u041f\u0435\u0442\u0440\u043e\u0432\u0430', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  4'}, '9': {'id': '9', 'name': '  \u0410\u043b\u0435\u043a\u0441\u0435\u0439', 'surname': '  \u0425\u043e\u0434\u0430\u0441\u0435\u0432\u0438\u0447', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  1'}, '10': {'id': '10', 'name': '  \u0410\u043d\u043d\u0430', 'surname': '  \u0410\u0437\u0430\u0440\u043a\u0435\u0432\u0438\u0447', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  2'}, '11': {'id': '11', 'name': 'Nname', 'surname': '  dd', 'faculty': '  dd', 'form of education': 'den', 'course': '  2'}, '12': {'id': '12', 'name': '  gg', 'surname': '  gg', 'faculty': '  gg', 'form of education': '  g', 'course': '  1'}, '13': {'id': '13', 'name': ' dd', 'surname': ' dd', 'faculty': ' dd', 'form of education': ' dd', 'course': ' 3'}}"
01-02-2023 23:38:34 - dicttoxml - INFO - default_item_func - Inside default_item_func(). parent = "root"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'1': {'id': '1', 'name': '  \u041c\u0430\u0440\u0438\u044f', 'surname': '  \u0418\u0432\u0430\u043d\u043e\u0432\u0430', 'faculty': '  \u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  1'}, '2': {'id': '2', 'name': '  \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440', 'surname': '  \u0421\u0438\u0434\u043e\u0440\u043e\u0432', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  2'}, '3': {'id': '3', 'name': '  \u0418\u0440\u0438\u043d\u0430', 'surname': '  \u041a\u0440\u0430\u0441\u0430\u0432\u0446\u0435\u0432\u0430', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  3'}, '4': {'id': '4', 'name': '  \u0412\u0438\u043a\u0442\u043e\u0440', 'surname': '  \u041a\u0430\u0440\u043f\u043e\u0432', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  4'}, '5': {'id': '5', 'name': '  \u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0430', 'surname': '\u041c\u0430\u043b\u0430\u0448\u0435\u0432\u0438\u0447', 'faculty': '\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430', 'form of education': '\u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '1'}, '6': {'id': '6', 'name': '  \u0418\u0432\u0430\u043d', 'surname': '  \u0421\u0442\u0430\u043d\u043a\u0435\u0432\u0438\u0447', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  2'}, '8': {'id': '8', 'name': '  \u0421\u0432\u0435\u0442\u043b\u0430\u043d\u0430', 'surname': '  \u041f\u0435\u0442\u0440\u043e\u0432\u0430', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  4'}, '9': {'id': '9', 'name': '  \u0410\u043b\u0435\u043a\u0441\u0435\u0439', 'surname': '  \u0425\u043e\u0434\u0430\u0441\u0435\u0432\u0438\u0447', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  1'}, '10': {'id': '10', 'name': '  \u0410\u043d\u043d\u0430', 'surname': '  \u0410\u0437\u0430\u0440\u043a\u0435\u0432\u0438\u0447', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  2'}, '11': {'id': '11', 'name': 'Nname', 'surname': '  dd', 'faculty': '  dd', 'form of education': 'den', 'course': '  2'}, '12': {'id': '12', 'name': '  gg', 'surname': '  gg', 'faculty': '  gg', 'form of education': '  g', 'course': '  1'}, '13': {'id': '13', 'name': ' dd', 'surname': ' dd', 'faculty': ' dd', 'form of education': ' dd', 'course': ' 3'}}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Inside convert_dict(): obj type is: "dict", obj="{'1': {'id': '1', 'name': '  \u041c\u0430\u0440\u0438\u044f', 'surname': '  \u0418\u0432\u0430\u043d\u043e\u0432\u0430', 'faculty': '  \u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  1'}, '2': {'id': '2', 'name': '  \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440', 'surname': '  \u0421\u0438\u0434\u043e\u0440\u043e\u0432', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  2'}, '3': {'id': '3', 'name': '  \u0418\u0440\u0438\u043d\u0430', 'surname': '  \u041a\u0440\u0430\u0441\u0430\u0432\u0446\u0435\u0432\u0430', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  3'}, '4': {'id': '4', 'name': '  \u0412\u0438\u043a\u0442\u043e\u0440', 'surname': '  \u041a\u0430\u0440\u043f\u043e\u0432', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  4'}, '5': {'id': '5', 'name': '  \u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0430', 'surname': '\u041c\u0430\u043b\u0430\u0448\u0435\u0432\u0438\u0447', 'faculty': '\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430', 'form of education': '\u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '1'}, '6': {'id': '6', 'name': '  \u0418\u0432\u0430\u043d', 'surname': '  \u0421\u0442\u0430\u043d\u043a\u0435\u0432\u0438\u0447', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  2'}, '8': {'id': '8', 'name': '  \u0421\u0432\u0435\u0442\u043b\u0430\u043d\u0430', 'surname': '  \u041f\u0435\u0442\u0440\u043e\u0432\u0430', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  4'}, '9': {'id': '9', 'name': '  \u0410\u043b\u0435\u043a\u0441\u0435\u0439', 'surname': '  \u0425\u043e\u0434\u0430\u0441\u0435\u0432\u0438\u0447', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  1'}, '10': {'id': '10', 'name': '  \u0410\u043d\u043d\u0430', 'surname': '  \u0410\u0437\u0430\u0440\u043a\u0435\u0432\u0438\u0447', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  2'}, '11': {'id': '11', 'name': 'Nname', 'surname': '  dd', 'faculty': '  dd', 'form of education': 'den', 'course': '  2'}, '12': {'id': '12', 'name': '  gg', 'surname': '  gg', 'faculty': '  gg', 'form of education': '  g', 'course': '  1'}, '13': {'id': '13', 'name': ' dd', 'surname': ' dd', 'faculty': ' dd', 'form of education': ' dd', 'course': ' 3'}}"
01-02-2023 23:38:34 - dicttoxml - INFO - default_item_func - Inside default_item_func(). parent = "root"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "1"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'id': '1', 'name': '  \u041c\u0430\u0440\u0438\u044f', 'surname': '  \u0418\u0432\u0430\u043d\u043e\u0432\u0430', 'faculty': '  \u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  1'}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="1", val="{'id': '1', 'name': '  \u041c\u0430\u0440\u0438\u044f', 'surname': '  \u0418\u0432\u0430\u043d\u043e\u0432\u0430', 'faculty': '  \u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  1'}", type(val)="dict"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "1"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "1" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "1" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "1"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "1"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "1"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'id': '1', 'name': '  \u041c\u0430\u0440\u0438\u044f', 'surname': '  \u0418\u0432\u0430\u043d\u043e\u0432\u0430', 'faculty': '  \u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  1'}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Inside convert_dict(): obj type is: "dict", obj="{'id': '1', 'name': '  \u041c\u0430\u0440\u0438\u044f', 'surname': '  \u0418\u0432\u0430\u043d\u043e\u0432\u0430', 'faculty': '  \u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  1'}"
01-02-2023 23:38:34 - dicttoxml - INFO - default_item_func - Inside default_item_func(). parent = "n1"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "1"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="id", val="1", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "id" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "id" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "1"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="id", val="1", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "id" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "id" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "id"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "1" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "1"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u041c\u0430\u0440\u0438\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="name", val="  \u041c\u0430\u0440\u0438\u044f", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "name" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "name" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u041c\u0430\u0440\u0438\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="name", val="  \u041c\u0430\u0440\u0438\u044f", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "name" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "name" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "name"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u041c\u0430\u0440\u0438\u044f" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u041c\u0430\u0440\u0438\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0418\u0432\u0430\u043d\u043e\u0432\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="surname", val="  \u0418\u0432\u0430\u043d\u043e\u0432\u0430", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "surname" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "surname" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0418\u0432\u0430\u043d\u043e\u0432\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="surname", val="  \u0418\u0432\u0430\u043d\u043e\u0432\u0430", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "surname" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "surname" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u0418\u0432\u0430\u043d\u043e\u0432\u0430" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0418\u0432\u0430\u043d\u043e\u0432\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="faculty", val="  \u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "faculty" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "faculty" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="faculty", val="  \u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "faculty" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "faculty" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0434\u043d\u0435\u0432\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="form of education", val="  \u0434\u043d\u0435\u0432\u043d\u0430\u044f", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "form of education" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "form of education" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0434\u043d\u0435\u0432\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="form_of_education", val="  \u0434\u043d\u0435\u0432\u043d\u0430\u044f", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "form_of_education" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "form_of_education" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u0434\u043d\u0435\u0432\u043d\u0430\u044f" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0434\u043d\u0435\u0432\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  1"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="course", val="  1", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "course" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "course" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  1"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="course", val="  1", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "course" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "course" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "course"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  1" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  1"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "2"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'id': '2', 'name': '  \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440', 'surname': '  \u0421\u0438\u0434\u043e\u0440\u043e\u0432', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  2'}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="2", val="{'id': '2', 'name': '  \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440', 'surname': '  \u0421\u0438\u0434\u043e\u0440\u043e\u0432', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  2'}", type(val)="dict"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "2"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "2" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "2" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "2"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "2"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "2"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'id': '2', 'name': '  \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440', 'surname': '  \u0421\u0438\u0434\u043e\u0440\u043e\u0432', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  2'}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Inside convert_dict(): obj type is: "dict", obj="{'id': '2', 'name': '  \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440', 'surname': '  \u0421\u0438\u0434\u043e\u0440\u043e\u0432', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  2'}"
01-02-2023 23:38:34 - dicttoxml - INFO - default_item_func - Inside default_item_func(). parent = "n2"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "2"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="id", val="2", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "id" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "id" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "2"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="id", val="2", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "id" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "id" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "id"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "2" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "2"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="name", val="  \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "name" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "name" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="name", val="  \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "name" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "name" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "name"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0421\u0438\u0434\u043e\u0440\u043e\u0432"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="surname", val="  \u0421\u0438\u0434\u043e\u0440\u043e\u0432", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "surname" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "surname" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0421\u0438\u0434\u043e\u0440\u043e\u0432"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="surname", val="  \u0421\u0438\u0434\u043e\u0440\u043e\u0432", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "surname" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "surname" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u0421\u0438\u0434\u043e\u0440\u043e\u0432" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0421\u0438\u0434\u043e\u0440\u043e\u0432"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0424\u0438\u0437\u0438\u043a\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="faculty", val="  \u0424\u0438\u0437\u0438\u043a\u0430", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "faculty" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "faculty" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0424\u0438\u0437\u0438\u043a\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="faculty", val="  \u0424\u0438\u0437\u0438\u043a\u0430", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "faculty" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "faculty" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u0424\u0438\u0437\u0438\u043a\u0430" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0424\u0438\u0437\u0438\u043a\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0434\u043d\u0435\u0432\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="form of education", val="  \u0434\u043d\u0435\u0432\u043d\u0430\u044f", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "form of education" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "form of education" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0434\u043d\u0435\u0432\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="form_of_education", val="  \u0434\u043d\u0435\u0432\u043d\u0430\u044f", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "form_of_education" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "form_of_education" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u0434\u043d\u0435\u0432\u043d\u0430\u044f" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0434\u043d\u0435\u0432\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  2"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="course", val="  2", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "course" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "course" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  2"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="course", val="  2", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "course" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "course" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "course"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  2" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  2"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "3"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'id': '3', 'name': '  \u0418\u0440\u0438\u043d\u0430', 'surname': '  \u041a\u0440\u0430\u0441\u0430\u0432\u0446\u0435\u0432\u0430', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  3'}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="3", val="{'id': '3', 'name': '  \u0418\u0440\u0438\u043d\u0430', 'surname': '  \u041a\u0440\u0430\u0441\u0430\u0432\u0446\u0435\u0432\u0430', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  3'}", type(val)="dict"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "3"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "3" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "3" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "3"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "3"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "3"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'id': '3', 'name': '  \u0418\u0440\u0438\u043d\u0430', 'surname': '  \u041a\u0440\u0430\u0441\u0430\u0432\u0446\u0435\u0432\u0430', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  3'}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Inside convert_dict(): obj type is: "dict", obj="{'id': '3', 'name': '  \u0418\u0440\u0438\u043d\u0430', 'surname': '  \u041a\u0440\u0430\u0441\u0430\u0432\u0446\u0435\u0432\u0430', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  3'}"
01-02-2023 23:38:34 - dicttoxml - INFO - default_item_func - Inside default_item_func(). parent = "n3"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "3"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="id", val="3", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "id" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "id" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "3"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="id", val="3", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "id" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "id" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "id"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "3" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "3"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0418\u0440\u0438\u043d\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="name", val="  \u0418\u0440\u0438\u043d\u0430", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "name" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "name" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0418\u0440\u0438\u043d\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="name", val="  \u0418\u0440\u0438\u043d\u0430", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "name" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "name" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "name"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u0418\u0440\u0438\u043d\u0430" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0418\u0440\u0438\u043d\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u041a\u0440\u0430\u0441\u0430\u0432\u0446\u0435\u0432\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="surname", val="  \u041a\u0440\u0430\u0441\u0430\u0432\u0446\u0435\u0432\u0430", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "surname" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "surname" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u041a\u0440\u0430\u0441\u0430\u0432\u0446\u0435\u0432\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="surname", val="  \u041a\u0440\u0430\u0441\u0430\u0432\u0446\u0435\u0432\u0430", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "surname" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "surname" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u041a\u0440\u0430\u0441\u0430\u0432\u0446\u0435\u0432\u0430" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u041a\u0440\u0430\u0441\u0430\u0432\u0446\u0435\u0432\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="faculty", val="  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "faculty" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "faculty" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="faculty", val="  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "faculty" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "faculty" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0437\u0430\u043e\u0447\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="form of education", val="  \u0437\u0430\u043e\u0447\u043d\u0430\u044f", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "form of education" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "form of education" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0437\u0430\u043e\u0447\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="form_of_education", val="  \u0437\u0430\u043e\u0447\u043d\u0430\u044f", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "form_of_education" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "form_of_education" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u0437\u0430\u043e\u0447\u043d\u0430\u044f" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0437\u0430\u043e\u0447\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  3"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="course", val="  3", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "course" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "course" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  3"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="course", val="  3", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "course" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "course" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "course"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  3" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  3"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "4"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'id': '4', 'name': '  \u0412\u0438\u043a\u0442\u043e\u0440', 'surname': '  \u041a\u0430\u0440\u043f\u043e\u0432', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  4'}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="4", val="{'id': '4', 'name': '  \u0412\u0438\u043a\u0442\u043e\u0440', 'surname': '  \u041a\u0430\u0440\u043f\u043e\u0432', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  4'}", type(val)="dict"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "4"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "4" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "4" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "4"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "4"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "4"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'id': '4', 'name': '  \u0412\u0438\u043a\u0442\u043e\u0440', 'surname': '  \u041a\u0430\u0440\u043f\u043e\u0432', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  4'}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Inside convert_dict(): obj type is: "dict", obj="{'id': '4', 'name': '  \u0412\u0438\u043a\u0442\u043e\u0440', 'surname': '  \u041a\u0430\u0440\u043f\u043e\u0432', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  4'}"
01-02-2023 23:38:34 - dicttoxml - INFO - default_item_func - Inside default_item_func(). parent = "n4"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "4"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="id", val="4", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "id" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "id" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "4"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="id", val="4", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "id" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "id" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "id"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "4" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "4"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0412\u0438\u043a\u0442\u043e\u0440"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="name", val="  \u0412\u0438\u043a\u0442\u043e\u0440", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "name" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "name" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0412\u0438\u043a\u0442\u043e\u0440"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="name", val="  \u0412\u0438\u043a\u0442\u043e\u0440", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "name" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "name" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "name"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u0412\u0438\u043a\u0442\u043e\u0440" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0412\u0438\u043a\u0442\u043e\u0440"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u041a\u0430\u0440\u043f\u043e\u0432"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="surname", val="  \u041a\u0430\u0440\u043f\u043e\u0432", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "surname" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "surname" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u041a\u0430\u0440\u043f\u043e\u0432"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="surname", val="  \u041a\u0430\u0440\u043f\u043e\u0432", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "surname" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "surname" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u041a\u0430\u0440\u043f\u043e\u0432" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u041a\u0430\u0440\u043f\u043e\u0432"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0424\u0438\u0437\u0438\u043a\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="faculty", val="  \u0424\u0438\u0437\u0438\u043a\u0430", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "faculty" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "faculty" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0424\u0438\u0437\u0438\u043a\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="faculty", val="  \u0424\u0438\u0437\u0438\u043a\u0430", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "faculty" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "faculty" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u0424\u0438\u0437\u0438\u043a\u0430" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0424\u0438\u0437\u0438\u043a\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0437\u0430\u043e\u0447\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="form of education", val="  \u0437\u0430\u043e\u0447\u043d\u0430\u044f", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "form of education" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "form of education" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0437\u0430\u043e\u0447\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="form_of_education", val="  \u0437\u0430\u043e\u0447\u043d\u0430\u044f", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "form_of_education" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "form_of_education" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u0437\u0430\u043e\u0447\u043d\u0430\u044f" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0437\u0430\u043e\u0447\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  4"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="course", val="  4", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "course" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "course" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  4"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="course", val="  4", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "course" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "course" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "course"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  4" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  4"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "5"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'id': '5', 'name': '  \u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0430', 'surname': '\u041c\u0430\u043b\u0430\u0448\u0435\u0432\u0438\u0447', 'faculty': '\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430', 'form of education': '\u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '1'}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="5", val="{'id': '5', 'name': '  \u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0430', 'surname': '\u041c\u0430\u043b\u0430\u0448\u0435\u0432\u0438\u0447', 'faculty': '\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430', 'form of education': '\u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '1'}", type(val)="dict"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "5"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "5" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "5" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "5"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "5"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "5"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'id': '5', 'name': '  \u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0430', 'surname': '\u041c\u0430\u043b\u0430\u0448\u0435\u0432\u0438\u0447', 'faculty': '\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430', 'form of education': '\u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '1'}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Inside convert_dict(): obj type is: "dict", obj="{'id': '5', 'name': '  \u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0430', 'surname': '\u041c\u0430\u043b\u0430\u0448\u0435\u0432\u0438\u0447', 'faculty': '\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430', 'form of education': '\u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '1'}"
01-02-2023 23:38:34 - dicttoxml - INFO - default_item_func - Inside default_item_func(). parent = "n5"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "5"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="id", val="5", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "id" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "id" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "5"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="id", val="5", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "id" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "id" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "id"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "5" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "5"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="name", val="  \u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0430", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "name" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "name" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="name", val="  \u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0430", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "name" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "name" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "name"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0430" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "\u041c\u0430\u043b\u0430\u0448\u0435\u0432\u0438\u0447"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="surname", val="\u041c\u0430\u043b\u0430\u0448\u0435\u0432\u0438\u0447", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "surname" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "surname" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "\u041c\u0430\u043b\u0430\u0448\u0435\u0432\u0438\u0447"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="surname", val="\u041c\u0430\u043b\u0430\u0448\u0435\u0432\u0438\u0447", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "surname" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "surname" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "\u041c\u0430\u043b\u0430\u0448\u0435\u0432\u0438\u0447" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "\u041c\u0430\u043b\u0430\u0448\u0435\u0432\u0438\u0447"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="faculty", val="\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "faculty" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "faculty" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="faculty", val="\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "faculty" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "faculty" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "\u0434\u043d\u0435\u0432\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="form of education", val="\u0434\u043d\u0435\u0432\u043d\u0430\u044f", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "form of education" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "form of education" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "\u0434\u043d\u0435\u0432\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="form_of_education", val="\u0434\u043d\u0435\u0432\u043d\u0430\u044f", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "form_of_education" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "form_of_education" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "\u0434\u043d\u0435\u0432\u043d\u0430\u044f" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "\u0434\u043d\u0435\u0432\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "1"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="course", val="1", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "course" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "course" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "1"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="course", val="1", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "course" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "course" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "course"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "1" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "1"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "6"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'id': '6', 'name': '  \u0418\u0432\u0430\u043d', 'surname': '  \u0421\u0442\u0430\u043d\u043a\u0435\u0432\u0438\u0447', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  2'}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="6", val="{'id': '6', 'name': '  \u0418\u0432\u0430\u043d', 'surname': '  \u0421\u0442\u0430\u043d\u043a\u0435\u0432\u0438\u0447', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  2'}", type(val)="dict"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "6"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "6" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "6" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "6"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "6"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "6"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'id': '6', 'name': '  \u0418\u0432\u0430\u043d', 'surname': '  \u0421\u0442\u0430\u043d\u043a\u0435\u0432\u0438\u0447', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  2'}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Inside convert_dict(): obj type is: "dict", obj="{'id': '6', 'name': '  \u0418\u0432\u0430\u043d', 'surname': '  \u0421\u0442\u0430\u043d\u043a\u0435\u0432\u0438\u0447', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  2'}"
01-02-2023 23:38:34 - dicttoxml - INFO - default_item_func - Inside default_item_func(). parent = "n6"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "6"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="id", val="6", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "id" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "id" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "6"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="id", val="6", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "id" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "id" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "id"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "6" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "6"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0418\u0432\u0430\u043d"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="name", val="  \u0418\u0432\u0430\u043d", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "name" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "name" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0418\u0432\u0430\u043d"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="name", val="  \u0418\u0432\u0430\u043d", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "name" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "name" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "name"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u0418\u0432\u0430\u043d" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0418\u0432\u0430\u043d"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0421\u0442\u0430\u043d\u043a\u0435\u0432\u0438\u0447"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="surname", val="  \u0421\u0442\u0430\u043d\u043a\u0435\u0432\u0438\u0447", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "surname" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "surname" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0421\u0442\u0430\u043d\u043a\u0435\u0432\u0438\u0447"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="surname", val="  \u0421\u0442\u0430\u043d\u043a\u0435\u0432\u0438\u0447", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "surname" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "surname" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u0421\u0442\u0430\u043d\u043a\u0435\u0432\u0438\u0447" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0421\u0442\u0430\u043d\u043a\u0435\u0432\u0438\u0447"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="faculty", val="  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "faculty" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "faculty" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="faculty", val="  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "faculty" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "faculty" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0434\u043d\u0435\u0432\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="form of education", val="  \u0434\u043d\u0435\u0432\u043d\u0430\u044f", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "form of education" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "form of education" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0434\u043d\u0435\u0432\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="form_of_education", val="  \u0434\u043d\u0435\u0432\u043d\u0430\u044f", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "form_of_education" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "form_of_education" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u0434\u043d\u0435\u0432\u043d\u0430\u044f" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0434\u043d\u0435\u0432\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  2"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="course", val="  2", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "course" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "course" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  2"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="course", val="  2", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "course" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "course" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "course"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  2" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  2"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "8"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'id': '8', 'name': '  \u0421\u0432\u0435\u0442\u043b\u0430\u043d\u0430', 'surname': '  \u041f\u0435\u0442\u0440\u043e\u0432\u0430', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  4'}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="8", val="{'id': '8', 'name': '  \u0421\u0432\u0435\u0442\u043b\u0430\u043d\u0430', 'surname': '  \u041f\u0435\u0442\u0440\u043e\u0432\u0430', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  4'}", type(val)="dict"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "8"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "8" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "8" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "8"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "8"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "8"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'id': '8', 'name': '  \u0421\u0432\u0435\u0442\u043b\u0430\u043d\u0430', 'surname': '  \u041f\u0435\u0442\u0440\u043e\u0432\u0430', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  4'}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Inside convert_dict(): obj type is: "dict", obj="{'id': '8', 'name': '  \u0421\u0432\u0435\u0442\u043b\u0430\u043d\u0430', 'surname': '  \u041f\u0435\u0442\u0440\u043e\u0432\u0430', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0434\u043d\u0435\u0432\u043d\u0430\u044f', 'course': '  4'}"
01-02-2023 23:38:34 - dicttoxml - INFO - default_item_func - Inside default_item_func(). parent = "n8"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "8"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="id", val="8", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "id" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "id" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "8"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="id", val="8", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "id" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "id" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "id"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "8" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "8"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0421\u0432\u0435\u0442\u043b\u0430\u043d\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="name", val="  \u0421\u0432\u0435\u0442\u043b\u0430\u043d\u0430", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "name" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "name" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0421\u0432\u0435\u0442\u043b\u0430\u043d\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="name", val="  \u0421\u0432\u0435\u0442\u043b\u0430\u043d\u0430", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "name" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "name" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "name"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u0421\u0432\u0435\u0442\u043b\u0430\u043d\u0430" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0421\u0432\u0435\u0442\u043b\u0430\u043d\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u041f\u0435\u0442\u0440\u043e\u0432\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="surname", val="  \u041f\u0435\u0442\u0440\u043e\u0432\u0430", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "surname" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "surname" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u041f\u0435\u0442\u0440\u043e\u0432\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="surname", val="  \u041f\u0435\u0442\u0440\u043e\u0432\u0430", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "surname" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "surname" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u041f\u0435\u0442\u0440\u043e\u0432\u0430" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u041f\u0435\u0442\u0440\u043e\u0432\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0424\u0438\u0437\u0438\u043a\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="faculty", val="  \u0424\u0438\u0437\u0438\u043a\u0430", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "faculty" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "faculty" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0424\u0438\u0437\u0438\u043a\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="faculty", val="  \u0424\u0438\u0437\u0438\u043a\u0430", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "faculty" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "faculty" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u0424\u0438\u0437\u0438\u043a\u0430" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0424\u0438\u0437\u0438\u043a\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0434\u043d\u0435\u0432\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="form of education", val="  \u0434\u043d\u0435\u0432\u043d\u0430\u044f", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "form of education" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "form of education" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0434\u043d\u0435\u0432\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="form_of_education", val="  \u0434\u043d\u0435\u0432\u043d\u0430\u044f", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "form_of_education" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "form_of_education" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u0434\u043d\u0435\u0432\u043d\u0430\u044f" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0434\u043d\u0435\u0432\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  4"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="course", val="  4", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "course" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "course" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  4"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="course", val="  4", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "course" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "course" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "course"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  4" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  4"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "9"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'id': '9', 'name': '  \u0410\u043b\u0435\u043a\u0441\u0435\u0439', 'surname': '  \u0425\u043e\u0434\u0430\u0441\u0435\u0432\u0438\u0447', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  1'}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="9", val="{'id': '9', 'name': '  \u0410\u043b\u0435\u043a\u0441\u0435\u0439', 'surname': '  \u0425\u043e\u0434\u0430\u0441\u0435\u0432\u0438\u0447', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  1'}", type(val)="dict"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "9"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "9" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "9" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "9"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "9"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "9"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'id': '9', 'name': '  \u0410\u043b\u0435\u043a\u0441\u0435\u0439', 'surname': '  \u0425\u043e\u0434\u0430\u0441\u0435\u0432\u0438\u0447', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  1'}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Inside convert_dict(): obj type is: "dict", obj="{'id': '9', 'name': '  \u0410\u043b\u0435\u043a\u0441\u0435\u0439', 'surname': '  \u0425\u043e\u0434\u0430\u0441\u0435\u0432\u0438\u0447', 'faculty': '  \u0424\u0438\u0437\u0438\u043a\u0430', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  1'}"
01-02-2023 23:38:34 - dicttoxml - INFO - default_item_func - Inside default_item_func(). parent = "n9"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "9"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="id", val="9", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "id" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "id" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "9"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="id", val="9", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "id" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "id" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "id"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "9" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "9"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0410\u043b\u0435\u043a\u0441\u0435\u0439"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="name", val="  \u0410\u043b\u0435\u043a\u0441\u0435\u0439", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "name" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "name" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0410\u043b\u0435\u043a\u0441\u0435\u0439"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="name", val="  \u0410\u043b\u0435\u043a\u0441\u0435\u0439", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "name" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "name" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "name"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u0410\u043b\u0435\u043a\u0441\u0435\u0439" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0410\u043b\u0435\u043a\u0441\u0435\u0439"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0425\u043e\u0434\u0430\u0441\u0435\u0432\u0438\u0447"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="surname", val="  \u0425\u043e\u0434\u0430\u0441\u0435\u0432\u0438\u0447", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "surname" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "surname" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0425\u043e\u0434\u0430\u0441\u0435\u0432\u0438\u0447"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="surname", val="  \u0425\u043e\u0434\u0430\u0441\u0435\u0432\u0438\u0447", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "surname" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "surname" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u0425\u043e\u0434\u0430\u0441\u0435\u0432\u0438\u0447" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0425\u043e\u0434\u0430\u0441\u0435\u0432\u0438\u0447"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0424\u0438\u0437\u0438\u043a\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="faculty", val="  \u0424\u0438\u0437\u0438\u043a\u0430", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "faculty" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "faculty" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0424\u0438\u0437\u0438\u043a\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="faculty", val="  \u0424\u0438\u0437\u0438\u043a\u0430", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "faculty" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "faculty" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u0424\u0438\u0437\u0438\u043a\u0430" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0424\u0438\u0437\u0438\u043a\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0437\u0430\u043e\u0447\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="form of education", val="  \u0437\u0430\u043e\u0447\u043d\u0430\u044f", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "form of education" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "form of education" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0437\u0430\u043e\u0447\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="form_of_education", val="  \u0437\u0430\u043e\u0447\u043d\u0430\u044f", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "form_of_education" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "form_of_education" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u0437\u0430\u043e\u0447\u043d\u0430\u044f" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0437\u0430\u043e\u0447\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  1"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="course", val="  1", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "course" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "course" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  1"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="course", val="  1", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "course" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "course" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "course"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  1" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  1"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "10"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'id': '10', 'name': '  \u0410\u043d\u043d\u0430', 'surname': '  \u0410\u0437\u0430\u0440\u043a\u0435\u0432\u0438\u0447', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  2'}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="10", val="{'id': '10', 'name': '  \u0410\u043d\u043d\u0430', 'surname': '  \u0410\u0437\u0430\u0440\u043a\u0435\u0432\u0438\u0447', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  2'}", type(val)="dict"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "10"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "10" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "10" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "10"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "10"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "10"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'id': '10', 'name': '  \u0410\u043d\u043d\u0430', 'surname': '  \u0410\u0437\u0430\u0440\u043a\u0435\u0432\u0438\u0447', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  2'}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Inside convert_dict(): obj type is: "dict", obj="{'id': '10', 'name': '  \u0410\u043d\u043d\u0430', 'surname': '  \u0410\u0437\u0430\u0440\u043a\u0435\u0432\u0438\u0447', 'faculty': '  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f', 'form of education': '  \u0437\u0430\u043e\u0447\u043d\u0430\u044f', 'course': '  2'}"
01-02-2023 23:38:34 - dicttoxml - INFO - default_item_func - Inside default_item_func(). parent = "n10"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "10"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="id", val="10", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "id" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "id" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "10"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="id", val="10", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "id" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "id" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "id"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "10" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "10"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0410\u043d\u043d\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="name", val="  \u0410\u043d\u043d\u0430", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "name" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "name" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0410\u043d\u043d\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="name", val="  \u0410\u043d\u043d\u0430", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "name" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "name" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "name"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u0410\u043d\u043d\u0430" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0410\u043d\u043d\u0430"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0410\u0437\u0430\u0440\u043a\u0435\u0432\u0438\u0447"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="surname", val="  \u0410\u0437\u0430\u0440\u043a\u0435\u0432\u0438\u0447", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "surname" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "surname" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0410\u0437\u0430\u0440\u043a\u0435\u0432\u0438\u0447"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="surname", val="  \u0410\u0437\u0430\u0440\u043a\u0435\u0432\u0438\u0447", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "surname" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "surname" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u0410\u0437\u0430\u0440\u043a\u0435\u0432\u0438\u0447" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0410\u0437\u0430\u0440\u043a\u0435\u0432\u0438\u0447"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="faculty", val="  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "faculty" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "faculty" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="faculty", val="  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "faculty" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "faculty" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0437\u0430\u043e\u0447\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="form of education", val="  \u0437\u0430\u043e\u0447\u043d\u0430\u044f", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "form of education" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "form of education" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0437\u0430\u043e\u0447\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="form_of_education", val="  \u0437\u0430\u043e\u0447\u043d\u0430\u044f", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "form_of_education" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "form_of_education" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  \u0437\u0430\u043e\u0447\u043d\u0430\u044f" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  \u0437\u0430\u043e\u0447\u043d\u0430\u044f"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  2"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="course", val="  2", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "course" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "course" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  2"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="course", val="  2", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "course" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "course" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "course"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  2" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  2"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "11"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'id': '11', 'name': 'Nname', 'surname': '  dd', 'faculty': '  dd', 'form of education': 'den', 'course': '  2'}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="11", val="{'id': '11', 'name': 'Nname', 'surname': '  dd', 'faculty': '  dd', 'form of education': 'den', 'course': '  2'}", type(val)="dict"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "11"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "11" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "11" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "11"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "11"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "11"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'id': '11', 'name': 'Nname', 'surname': '  dd', 'faculty': '  dd', 'form of education': 'den', 'course': '  2'}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Inside convert_dict(): obj type is: "dict", obj="{'id': '11', 'name': 'Nname', 'surname': '  dd', 'faculty': '  dd', 'form of education': 'den', 'course': '  2'}"
01-02-2023 23:38:34 - dicttoxml - INFO - default_item_func - Inside default_item_func(). parent = "n11"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "11"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="id", val="11", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "id" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "id" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "11"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="id", val="11", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "id" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "id" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "id"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "11" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "11"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "Nname"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="name", val="Nname", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "name" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "name" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "Nname"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="name", val="Nname", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "name" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "name" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "name"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "Nname" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "Nname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  dd"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="surname", val="  dd", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "surname" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "surname" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  dd"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="surname", val="  dd", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "surname" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "surname" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  dd" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  dd"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  dd"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="faculty", val="  dd", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "faculty" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "faculty" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  dd"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="faculty", val="  dd", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "faculty" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "faculty" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  dd" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  dd"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "den"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="form of education", val="den", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "form of education" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "form of education" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "den"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="form_of_education", val="den", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "form_of_education" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "form_of_education" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "den" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "den"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  2"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="course", val="  2", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "course" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "course" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  2"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="course", val="  2", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "course" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "course" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "course"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  2" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  2"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "12"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'id': '12', 'name': '  gg', 'surname': '  gg', 'faculty': '  gg', 'form of education': '  g', 'course': '  1'}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="12", val="{'id': '12', 'name': '  gg', 'surname': '  gg', 'faculty': '  gg', 'form of education': '  g', 'course': '  1'}", type(val)="dict"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "12"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "12" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "12" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "12"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "12"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "12"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'id': '12', 'name': '  gg', 'surname': '  gg', 'faculty': '  gg', 'form of education': '  g', 'course': '  1'}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Inside convert_dict(): obj type is: "dict", obj="{'id': '12', 'name': '  gg', 'surname': '  gg', 'faculty': '  gg', 'form of education': '  g', 'course': '  1'}"
01-02-2023 23:38:34 - dicttoxml - INFO - default_item_func - Inside default_item_func(). parent = "n12"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "12"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="id", val="12", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "id" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "id" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "12"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="id", val="12", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "id" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "id" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "id"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "12" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "12"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  gg"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="name", val="  gg", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "name" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "name" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  gg"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="name", val="  gg", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "name" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "name" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "name"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  gg" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  gg"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  gg"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="surname", val="  gg", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "surname" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "surname" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  gg"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="surname", val="  gg", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "surname" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "surname" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  gg" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  gg"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  gg"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="faculty", val="  gg", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "faculty" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "faculty" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  gg"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="faculty", val="  gg", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "faculty" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "faculty" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  gg" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  gg"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  g"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="form of education", val="  g", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "form of education" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "form of education" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  g"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="form_of_education", val="  g", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "form_of_education" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "form_of_education" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  g" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  g"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  1"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="course", val="  1", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "course" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "course" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  1"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="course", val="  1", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "course" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "course" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "course"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "  1" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "  1"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "13"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'id': '13', 'name': ' dd', 'surname': ' dd', 'faculty': ' dd', 'form of education': ' dd', 'course': ' 3'}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="13", val="{'id': '13', 'name': ' dd', 'surname': ' dd', 'faculty': ' dd', 'form of education': ' dd', 'course': ' 3'}", type(val)="dict"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "13"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "13" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "13" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "13"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "13"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "13"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{'id': '13', 'name': ' dd', 'surname': ' dd', 'faculty': ' dd', 'form of education': ' dd', 'course': ' 3'}"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Inside convert_dict(): obj type is: "dict", obj="{'id': '13', 'name': ' dd', 'surname': ' dd', 'faculty': ' dd', 'form of education': ' dd', 'course': ' 3'}"
01-02-2023 23:38:34 - dicttoxml - INFO - default_item_func - Inside default_item_func(). parent = "n13"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "13"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="id", val="13", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "id" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "id" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "13"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="id", val="13", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "id" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "id" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "id"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "id"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "13" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "13"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = " dd"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="name", val=" dd", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "name" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "name" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = " dd"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="name", val=" dd", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "name" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "name" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "name"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "name"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = " dd" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = " dd"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = " dd"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="surname", val=" dd", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "surname" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "surname" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = " dd"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="surname", val=" dd", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "surname" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "surname" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "surname"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = " dd" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = " dd"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = " dd"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="faculty", val=" dd", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "faculty" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "faculty" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = " dd"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="faculty", val=" dd", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "faculty" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "faculty" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "faculty"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = " dd" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = " dd"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = " dd"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="form of education", val=" dd", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "form of education" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "form of education" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form of education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = " dd"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="form_of_education", val=" dd", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "form_of_education" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "form_of_education" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "form_of_education"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = " dd" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = " dd"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = " 3"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_dict - Looping inside convert_dict(): key="course", val=" 3", type(val)="str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "course" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "course" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = " 3"
01-02-2023 23:38:34 - dicttoxml - INFO - convert_kv - Inside convert_kv(): key="course", val=" 3", type(val) is: "str"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - make_valid_xml_name - Inside make_valid_xml_name(). Testing key "course" with attr "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "course" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = "{}" and type(s) = "<class 'dict'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = "course"
01-02-2023 23:38:34 - dicttoxml - INFO - key_is_valid_xml - Inside key_is_valid_xml(). Testing "course"
01-02-2023 23:38:34 - dicttoxml - INFO - make_attrstring - Inside make_attstring(). attr = "{}"
01-02-2023 23:38:34 - dicttoxml - INFO - escape_xml - Inside escape_xml(). s = " 3" and type(s) = "<class 'str'>"
01-02-2023 23:38:34 - dicttoxml - INFO - unicode_me - Inside unicode_me(). val = " 3"
01-02-2023 23:38:58 - user_interface - INFO - export_format_menu - Start export menu
01-02-2023 23:38:58 - user_interface - INFO - export_format_menu - Start choose a format menu
01-02-2023 23:39:07 - export - INFO - save_json - Export in json format: students.json
01-02-2023 23:39:17 - user_interface - INFO - export_format_menu - Start export menu
01-02-2023 23:39:17 - user_interface - INFO - export_format_menu - Start choose a format menu
01-02-2023 23:39:27 - export - INFO - save_csv - Export in csv format: student.csv
01-02-2023 23:41:35 - main - INFO - <module> - Start program
01-02-2023 23:41:35 - controller - INFO - read_all - Show all. Database File - students.csv
01-02-2023 23:41:42 - user_interface - INFO - import_export_menu - Start import/export menu
01-02-2023 23:41:44 - user_interface - INFO - export_format_menu - Start export menu
01-02-2023 23:41:44 - user_interface - INFO - export_format_menu - Start choose a format menu
01-02-2023 23:41:51 - export - INFO - save_csv - Export in csv format: students.csv
01-02-2023 23:42:48 - controller - INFO - file_import - Changing the database file: students.csv.xml
01-02-2023 23:42:48 - controller - INFO - read_all - Show all. Database File - students.csv.xml
